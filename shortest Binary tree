import sys
 class Node:
    def __init__(self, data, left=None, right=None):
        self.data = data
        self.left = left
        self.right = right
 
 def isNodePresent(root, node):
    if root is None:
        return False
 
   
    if root == node:
        return True
    return isNodePresent(root.left, node) or isNodePresent(root.right, node)
 
 

def findLevel(root, node, level):
 
    
    if root is None:
        return -sys.maxsize
 
   
    if root == node:
        return level
 
    
    left = findLevel(root.left, node, level + 1)
 
   
    if left != -sys.maxsize:
        return left
    return findLevel(root.right, node, level + 1)
 
 

def findLCA(root, x, y):
 
    
    if root is None:
        return None
 
    
    if root == x or root == y:
        return root
    left = findLCA(root.left, x, y)
    right = findLCA(root.right, x, y)
    if left and right:
        return root
    if left:
        return left
    if right:
        return right
 
    return None
 
 

def findDistance(root, x, y):
     lca = None
     if isNodePresent(root, y) and isNodePresent(root, x):
        lca = findLCA(root, x, y)
    else:
        return -sys.maxsize
 
    
    return findLevel(lca, x, 0) + findLevel(lca, y, 0)
 
    
 
 
if __name__ == '__main__':
 
    
 
    root = Node(1)
    root.left = Node(2)
    root.right = Node(3)
    root.left.right = Node(4)
    root.right.left = Node(5)
    root.right.right = Node(6)
    root.right.left.left = Node(7)
    root.right.right.right = Node(8)
   
   
    print(findDistance(root, root.right.left.left, root.right.right))
